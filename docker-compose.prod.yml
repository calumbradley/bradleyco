services:
  # --- PostgreSQL (unchanged) ---
  postgres:
    image: postgres:15-alpine
    container_name: medusa_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: medusa
      POSTGRES_USER: medusa
      POSTGRES_PASSWORD: medusa
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - medusa_network

  # --- Redis (unchanged) ---
  redis:
    image: redis:7-alpine
    container_name: medusa_redis_prod
    restart: unless-stopped
    networks:
      - medusa_network

  # --- Medusa (server mode) ---
  medusa-server:
    image: ghcr.io/calumbradley/bradleyco/medusa:latest # prebuilt image from CI
    container_name: medusa_backend_prod
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    ports:
      - "9000:9000" # expose API + Admin
    environment:
      # Required envs (from docs)
      - NODE_ENV=production
      - PORT=9000
      - DATABASE_URL=postgres://medusa:medusa@postgres:5432/medusa
      - REDIS_URL=redis://redis:6379
      - COOKIE_SECRET=${COOKIE_SECRET:-supersecret} # TODO: set strong secret via env
      - JWT_SECRET=${JWT_SECRET:-supersecret} # TODO: set strong secret via env

      # CORS and backendUrl (update with your domains/URL)
      - STORE_CORS=${STORE_CORS:-http://localhost:8000}
      - ADMIN_CORS=${ADMIN_CORS:-http://localhost:9000}
      - AUTH_CORS=${AUTH_CORS:-http://localhost:8000,http://localhost:9000}
      - MEDUSA_BACKEND_URL=${MEDUSA_BACKEND_URL:-http://localhost:9000}

      # Server instance config
      - DISABLE_MEDUSA_ADMIN=false
      - MEDUSA_WORKER_MODE=server
    # Run from built output, install deps if missing, then predeploy + start
    command: >
      sh -lc 'cd .medusa/server &&
              [ -d node_modules ] || npm ci --omit=dev &&
              npm run predeploy &&
              npm run start'
    networks:
      - medusa_network
    labels:
      # Enable Traefik for this service
      - traefik.enable=true
      # HTTP router: redirect to HTTPS
      - traefik.http.routers.medusa-http.rule=Host(`api.bradleyfragrance.com`) # hardcoded domain
      - traefik.http.routers.medusa-http.entrypoints=web
      - traefik.http.routers.medusa-http.middlewares=redirect-to-https
      # HTTPS router: secure traffic
      - traefik.http.routers.medusa-https.rule=Host(`api.bradleyfragrance.com`) # hardcoded domain
      - traefik.http.routers.medusa-https.entrypoints=websecure
      - traefik.http.routers.medusa-https.tls.certresolver=le
      # Service definition
      - traefik.http.services.medusa.loadbalancer.server.port=9000
      # Middleware for redirect
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

  # --- Medusa (worker mode) ---
  medusa-worker:
    image: ghcr.io/calumbradley/bradleyco/medusa:latest # same image
    container_name: medusa_worker_prod
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      # Required envs (from docs)
      - NODE_ENV=production
      - DATABASE_URL=postgres://medusa:medusa@postgres:5432/medusa
      - REDIS_URL=redis://redis:6379

      # Worker instance config
      - DISABLE_MEDUSA_ADMIN=true
      - MEDUSA_WORKER_MODE=worker
    # Worker runs from built output; no predeploy here
    command: >
      sh -lc 'cd .medusa/server &&
              [ -d node_modules ] || npm ci --omit=dev &&
              npm run start'
    networks:
      - medusa_network

  # Reverse proxy + Let's Encrypt (automatic HTTPS)
  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: unless-stopped
    command:
      # watch Docker and donâ€™t auto-expose everything
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # entrypoints for HTTP and HTTPS
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Let's Encrypt (HTTP-01 challenge via port 80)
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.le.acme.email=admin@bradleyfragrance.com # hardcoded email for Let's Encrypt
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json # persisted certs
    ports:
      - "80:80" # public HTTP
      - "443:443" # public HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # read-only Docker socket
      - traefik_letsencrypt:/letsencrypt # persist ACME certs
    networks:
      - medusa_network

volumes:
  postgres_data_prod:
  traefik_letsencrypt: # stores Let's Encrypt certificates

networks:
  medusa_network:
    driver: bridge
